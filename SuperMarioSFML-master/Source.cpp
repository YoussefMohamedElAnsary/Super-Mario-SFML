
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include<SFML/Window.hpp>
#include<SFML/System.hpp>
#include <sstream>
#include<fstream>
#include <cctype>
#include<string>
using namespace std;
using namespace sf;
#define Max_main_menu 4
sf::Text mainMenu1[Max_main_menu];
sf::Text t1;
sf::Text t2;
sf::Text s;
sf::Text h;
sf::Text hp[10];
sf::Text over;
sf::Text c;
sf::Text n1;
sf::Text n2;
sf::Text n3;
sf::Text n4;
sf::Text n5;
sf::Text n6;
sf::Text n7;

sf::Font font1;

int width1;
float height1;
int page_number;
int Mainmenuseleted1 = 0;


void mainmenu(int width, float height, Font& font1);
void draw1(sf::RenderWindow& window, Font& font1);
void moveup();
void movedown();
int mainmenupressed();





//////////////////map

Clock frame_speed;
Texture Tiles[200];
vector <RectangleShape >MAP(3200);
void LoadTiles();
int level1[] =
{
   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,-1,-1,-1,1,5,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,25,25,25,25,25,-1,-1,-1,-1,-1

  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,22,24,23,22,24,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,25,26,26,26,26,26,25,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,1,5,1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,5,-1,-1,-1,-1,-1,5,-1,-1,-1,5,-1,-1,-1,5,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,23,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,-1,-1,-1,4,4,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,23,27,23,27,23,27,23,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,-1,-1,-1,4,4,4,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,4,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,23,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,-1,-1,-1,4,4,4,4,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,4,4,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,23,-1,-1,-1,-1
  ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
int level1C[16][200] =
{


  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1


  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,-1,-1,-1,1,5,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,25,25,25,25,25,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,22,24,23,22,24,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,22,24,23,22,24,-1,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,25,26,26,26,26,26,25,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,1,5,1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,5,-1,-1,-1,-1,-1,5,-1,-1,-1,5,-1,-1,-1,5,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,23,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,-1,-1,-1,4,4,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,27,23,27,23,27,23,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,-1,-1,-1,4,4,4,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,4,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,23,-1,-1,-1,-1
  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,-1,-1,-1,4,4,4,4,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,19,4,4,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,23,-1,-1,-1,-1
  ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
void DrawLevel(int arr[]);
SoundBuffer CoinSoundEffect;
SoundBuffer Jump;
SoundBuffer PowerUp;
SoundBuffer Break;

Sound sound;
Music MarioDeath;
Music Firee;
Music Winner;
int JumpTimer;
short GoombaAnimator;
bool  ECBottom[6], ECTop[6], goombafall[6], marioenemyjump[6];
bool mariodie = 0; int   countmario, DeathSound = false;;
bool ScoreEnemy[6];
RectangleShape Left(Vector2f(1, 16)), Right(Vector2f(1, 16)), Top(Vector2f(12, 1)), Down(Vector2f(12, 1));
bool mushspawn = false;
bool LookingLeft = false, LookingRight = false;
bool Win = false;
bool firepos = false;
bool SightR = false, SightL = false;
bool flowerspawn = false;
int FireTime = 0;


////////
int main()
{
    
    while (true)
    {
        if (!font1.loadFromFile("font/PublicPixel-0W5Kvv.ttf"))
        {
            //return EXIT_FAILURE;
        }


        RenderWindow window(sf::VideoMode(1700, 900), "Main Menu");
        ////////
        RectangleShape background;
        background.setSize(Vector2f(1700, 900));
        Texture maintexture;
        maintexture.loadFromFile("font/mario.png");
        background.setTexture(&maintexture);
        mainmenu(width1, height1, font1);
        while (window.isOpen())
        {

            sf::Event event;
            while (window.pollEvent(event))
            {
                if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Escape)) {
                    exit(0);
                }
                if (event.type == sf::Event::KeyReleased)
                {
                    if (event.key.code == sf::Keyboard::Up)
                    {
                        moveup();
                        break;
                    }
                    if (event.key.code == sf::Keyboard::Down)
                    {
                        movedown();
                        break;
                    }
                    //choose page
                    if (event.key.code == sf::Keyboard::Return)//press enter
                    {
                        //start : mapp
                        if (mainmenupressed() == 0)
                        {
                            window.close();
                            page_number = 0;
                        }
                        //how to play
                        if (mainmenupressed() == 1)
                        {
                            window.close();
                            page_number = 1;
                        }
                        //creidts
                        if (mainmenupressed() == 2)
                        {
                            window.close();
                            page_number = 2;
                        }
                        //exit
                        if (mainmenupressed() == 3)
                        {
                            window.close();
                            page_number = 3;
                        }
                    }
                }

            }
            window.clear();
            window.draw(background);
            draw1(window, font1);
            window.display();
        }
        if (page_number == 0)//map
        {

            // create the window
            sf::RenderWindow window(sf::VideoMode(1700, 900), "Super Mario", Style::None);
            window.setFramerateLimit(60);
            //Reading Mario
            // 3200* 256

            LoadTiles();
            DrawLevel(level1);
            bool jumping = false;
            int AnimationX = 0;
            const float gravity = 0.6f;
            Vector2f EnemySpeed[6];
            for (size_t i = 0; i < 6; i++)
            {
                EnemySpeed[i].x = 1.f;
            }
            Vector2f velocity;

            Sprite player;
            Texture t;
            t.loadFromFile("Images/mini.png");
            player.setPosition(50, 120);

            ////  big mario  ////

            Texture big;
            big.loadFromFile("Images/mshmini.png");

            bool big_mario = false;

            int ind = 0;

            ///////   mushroom    //////////

            Sprite mushroom;
            Texture mush;
            mush.loadFromFile("Images/mushroom.png");

            Texture BCoin;
            BCoin.loadFromFile("Images/10.png");
            Sprite  BonusCoin[13];
            //Sounds
            CoinSoundEffect.loadFromFile("Audio/coin.wav");
            Jump.loadFromFile("Audio/jump-small.wav");
            PowerUp.loadFromFile("Audio/powerup.wav");
            Break.loadFromFile("Audio/breakblock.wav");
            MarioDeath.openFromFile("Audio/mariodie.wav");
            Firee.openFromFile("Audio/fireball.wav");
            Winner.openFromFile("Audio/stage_clear.wav");

            ///  mariofire ///

            Texture fire;
            fire.loadFromFile("Images/MarioOnFire.png");

            bool marioburn = false;


            /// flower ///
            Sprite flower;
            Texture f;
            f.loadFromFile("Images/FireFlower.png");


            //// fire ////

            Sprite naarr;
            Texture fi;
            fi.loadFromFile("Images/Fire.png");
            naarr.setTexture(fi);
            naarr.setPosition(-50, -50);
            int ann = 0;
            bool firem = false;


            ///////    CONS    ////////

            Clock animation;
            Texture cointx;
            cointx.loadFromFile("Images/coins.png");

            int c = 0;
            int score = 0;
            

            vector <Sprite> coins(20);

            for (size_t i = 0; i < coins.size(); i++)
            {
                coins[i].setScale(0.5, 0.5);
                coins[i].setTexture(cointx);
                if (i == 0) coins[i].setPosition(260, 128);
                if (i == 1) coins[i].setPosition(480, 192);
                if (i == 2) coins[i].setPosition(630, 192);
                if (i == 3) coins[i].setPosition(790, 192);
                if (i == 4) coins[i].setPosition(1240, 192);
                if (i == 5) coins[i].setPosition(1270, 192);
                if (i == 6) coins[i].setPosition(1500, 192);
                if (i == 7) coins[i].setPosition(2490, 192);
                if (i == 8) coins[i].setPosition(2570, 192);
                if (i == 9) coins[i].setPosition(2240, 192);
                if (i == 10) coins[i].setPosition(1270, 64);
                if (i == 11) coins[i].setPosition(1330, 64);
                if (i == 12) coins[i].setPosition(1465, 64);
                if (i == 13) coins[i].setPosition(1970, 64);
                if (i == 14) coins[i].setPosition(2072, 64);
                if (i == 15) coins[i].setPosition(2500, 128);
                if (i == 16) coins[i].setPosition(970, 192);
                if (i == 17) coins[i].setPosition(1593, 126);
                if (i == 18) coins[i].setPosition(2840, 192);
                if (i == 19) coins[i].setPosition(132 * 16, 192);

                coins[i].setTextureRect(IntRect(31, 0, 31, 31));

            }
            // score text //
            sf::Font font;
            font.loadFromFile("font/CollegiateBlackFLF.ttf");

            sf::Text text;
            text.setFont(font);
            text.setString("score : " + std::to_string(score));
            text.setPosition(5, -1);
            text.setCharacterSize(20);

            ///////     gomba    /////////

            Sprite goomba[6];
            Texture g;
            g.loadFromFile("Images/Goomba.png");
            for (size_t i = 0; i < 6; i++)
            {
                //28*16 first
                //38*16 2nd 
                //49*16 3rd
                //132*16 4rth
                //140*16  5th
                //163*16 6th
                goomba[i].setTexture(g);
                if (i == 0) goomba[i].setPosition(28 * 16, 192);
                if (i == 1) goomba[i].setPosition(38 * 16, 192);
                if (i == 2) goomba[i].setPosition(49 * 16, 192);
                if (i == 3) goomba[i].setPosition(132 * 16, 192);
                if (i == 4) goomba[i].setPosition(140 * 16, 192);
                if (i == 5) goomba[i].setPosition(163 * 16, 192);
                goomba[i].setTextureRect(IntRect(0 * 16, 0, 16, 16));
            }

            bool dieenemy[6];
            for (size_t i = 0; i < 6; i++)
            {
                dieenemy[i] = false;

            }
            int counter[6];
            for (size_t i = 0; i < 6; i++)
            {
                counter[i] = 0;
            }
            // camera //
            sf::View camera(sf::Vector2f(0.0f, 0.0f), sf::Vector2f(512.0f, 256.0f));
            if (player.getPosition().x <= 255) { camera.setCenter(255.f, 128.f); }
            else { camera.setCenter(player.getPosition()); }
            player.setTexture(t);
            player.setTextureRect(IntRect(0 * 32, 0 * 32, 32, 32));
            player.setScale(0.5, 0.5);
            float speed = 3.0;
            Event event;
            jumping = true;
            // run the main loop    
            while (window.isOpen())
            {


                if (player.getPosition().x >= 182 * 16) { Win = true; Winner.play(); }

                velocity.x = 0;
                // handle events
                while (window.pollEvent(event))
                {
                    if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Escape))
                        window.close();
                }
                if (Keyboard::isKeyPressed(Keyboard::A)) {
                    velocity.x = -1;
                    LookingRight = false;
                    LookingLeft = true;
                    if (!big_mario && !marioburn)
                        player.setTextureRect(IntRect(AnimationX * 32, 0 * 32, 32, 32));
                    else
                        player.setTextureRect(IntRect(AnimationX * 32, 0, 32, 64));

                    if (frame_speed.getElapsedTime().asSeconds() > 0.09)
                    {
                        AnimationX++;
                        frame_speed.restart();
                    }
                    player.setOrigin(player.getLocalBounds().width, 0);
                    player.setScale(-0.5, 0.5);

                }
                if (Keyboard::isKeyPressed(Keyboard::D)) {
                    velocity.x = 1;
                    LookingRight = true;
                    LookingLeft = false;


                    if (!big_mario && !marioburn)
                        player.setTextureRect(IntRect(AnimationX * 32, 0 * 32, 32, 32));
                    else
                        player.setTextureRect(IntRect(AnimationX * 32, 0 * 64, 32, 64));

                    if (frame_speed.getElapsedTime().asSeconds() > 0.09)
                    {

                        AnimationX++;
                        frame_speed.restart();

                    }
                    player.setOrigin(0, 0);
                    player.setScale(0.5, 0.5);
                }
                if (Keyboard::isKeyPressed(Keyboard::W) && jumping == false) {

                    velocity.y = -10.7;
                }
                jumping = true;

                bool Stuck = 0;// el c di 34an lw hwa laz2 fi el ard f beltaly 5abt mn na7ytin f ytl3 fo2

                if (player.getPosition().y < 5) velocity.y = 0;
                for (int i = 0; i < 3200; i++)
                {
                    if (Down.getGlobalBounds().intersects(MAP[i].getGlobalBounds()) && velocity.y >= 0 && (level1[i] != -1 && !(level1[i] >= 12 && level1[i] <= 17) && level1[i] != 29)) {
                        velocity.y = 0;
                        jumping = false;
                    }
                    else if (Top.getGlobalBounds().intersects(MAP[i].getGlobalBounds()) && velocity.y < 0 && (level1[i] != -1 && !(level1[i] >= 12 && level1[i] <= 17) && level1[i] != 29)) {
                        velocity.y = 0;

                        if (level1[i] == 5) {
                            if (i == 1812) {
                                if (!mushspawn) {
                                    mushroom.setPosition(193, 128);
                                    mushroom.setScale(0.8, 0.8);
                                    mushroom.setTexture(mush);
                                    mushspawn = true;
                                }

                            }
                            else if (i == 1910) {
                                if (!flowerspawn) {
                                    flower.setPosition(110 * 16, 8 * 16);
                                    flower.setScale(0.8, 0.8);
                                    flower.setTexture(f);
                                    flowerspawn = true;
                                }
                            }

                            else {
                                BonusCoin[ind].setTexture(BCoin);
                                BonusCoin[ind].setPosition(MAP[i].getPosition().x, MAP[i].getPosition().y - MAP[i].getSize().y - 2);
                                ind++;

                            }
                            MAP[i].setTexture(&Tiles[8]);
                            level1[i] = 8;
                        }
                        if (level1[i] == 1 && (big_mario || marioburn)) {
                            MAP[i].setTexture(&Tiles[30]);
                            level1[i] = -1;
                            sound.setBuffer(Break);
                            sound.play();

                        }


                    }

                    if (Right.getGlobalBounds().intersects(MAP[i].getGlobalBounds()) && velocity.x > 0 && (level1[i] != -1 && !(level1[i] >= 12 && level1[i] <= 17) && level1[i] != 29)) {
                        velocity.x = 0;

                    }
                    if (Left.getGlobalBounds().intersects(MAP[i].getGlobalBounds()) && velocity.x < 0 && (level1[i] != -1 && !(level1[i] >= 12 && level1[i] <= 17) && level1[i] != 29)) {
                        velocity.x = 0;

                    }
                    if (Left.getGlobalBounds().intersects(MAP[i].getGlobalBounds()) && (level1[i] != -1 && !(level1[i] >= 12 && level1[i] <= 17) && level1[i] != 29))
                    {
                        Stuck = 1;
                    }
                    if (Right.getGlobalBounds().intersects(MAP[i].getGlobalBounds()) && (level1[i] != -1 && !(level1[i] >= 12 && level1[i] <= 17) && level1[i] != 29))
                    {
                        if (Stuck == 1 && velocity.y == 0) { player.move(0, -2);  Stuck = 0; }
                    }

                }
                if (velocity.y < 3.3 && jumping) velocity.y += gravity;
                float PosEX[6], PosEY[6];

                for (short i = 0; i < 6; i++) {
                    PosEX[i] = goomba[i].getPosition().x;
                    PosEY[i] = goomba[i].getPosition().y;
                }





                //Camera 
                if (camera.getCenter().x >= 260) {
                    if (velocity.x < 0) {
                        if (player.getPosition().x >= 250 && player.getPosition().x <= 2950) {
                            camera.move(velocity.x * speed, 0.f);
                            text.move(velocity.x * speed, 0);
                        }
                    }
                }
                if (camera.getCenter().x <= 2940) {
                    if (velocity.x > 0) {
                        if (player.getPosition().x >= 250 && player.getPosition().x <= 2950) {
                            camera.move(velocity.x * speed, 0.f);
                            text.move(velocity.x * speed, 0);
                        }
                    }
                }





                ////////////////
                for (size_t i = 0; i < 6; i++) {

                    if (!dieenemy[i]) {
                        goomba[i].move(EnemySpeed[i].x, EnemySpeed[i].y);
                        if (!ECBottom[i]) EnemySpeed[i].y += gravity;
                    }
                    if (frame_speed.getElapsedTime().asSeconds() > 0.2 && !dieenemy[i])
                    {


                        frame_speed.restart();

                        if (GoombaAnimator == 0)
                        {
                            GoombaAnimator++;
                        }
                        else
                            GoombaAnimator--;
                    }
                    if (!dieenemy[i]) goomba[i].setTextureRect(IntRect(GoombaAnimator * 16, 0, 16, 16));
                }


                bool EnemyMoveRight[6], EnemyMoveLeft[6];

                for (size_t i = 0; i < 6; i++)
                {
                    EnemyMoveLeft[i] = 0;
                    EnemyMoveRight[i] = 0;
                }





                for (size_t i = 0; i < 6; i++)
                {
                    int ExLeft = ((goomba[i].getPosition().x) + 16) / 16, ExRight = ((goomba[i].getPosition().x)) / 16, EyGround = ((goomba[i].getPosition().y)) / 16, EyTop = ((goomba[i].getPosition().y)) / 16, EyBot = ((goomba[i].getPosition().y) + 9) / 16, Ex = ((goomba[i].getPosition().x)) / 16;
                    if ((level1C[EyGround + 1][ExLeft] >= 0 || level1C[EyGround + 1][ExRight] >= 0)) { //Ground Standing
                        goomba[i].setPosition(PosEX[i], PosEY[i]);
                        EnemySpeed[i].y = 0;
                        goomba[i].move(EnemySpeed[i].x, EnemySpeed[i].y);
                        ECBottom[i] = true;

                    }
                    else ECBottom[i] = false;

                    if ((level1C[EyGround][ExLeft] >= 0 || level1C[EyGround][ExRight] >= 0)) {//Colliding from below a tile
                        goomba[i].setPosition(PosEX[i], PosEY[i]);
                        EnemySpeed[i].y = 0;
                        goomba[i].move(EnemySpeed[i].x, EnemySpeed[i].y);

                        ECTop[i] = true;


                    }
                    else ECTop[i] = false;
                    if (level1C[EyTop][Ex + 1] >= 0) {

                        EnemyMoveRight[i] = true;

                    }
                    if (level1C[EyTop][Ex] >= 0) {

                        EnemyMoveLeft[i] = true;
                    }
                    if (EnemyMoveRight[i])
                    {
                        EnemyMoveRight[i] = 0;
                        EnemySpeed[i].x = -1 * EnemySpeed[i].x;
                    }
                    if (EnemyMoveLeft[i])
                    {
                        EnemyMoveLeft[i] = 0;

                        EnemySpeed[i].x = -1 * EnemySpeed[i].x;
                    }

                }
                //Collision screen
                if (player.getPosition().x < 0.f)
                    player.setPosition(0.f, player.getPosition().y);

                for (int i = 0; i < ind; i++) {

                    if (player.getGlobalBounds().intersects(BonusCoin[i].getGlobalBounds())) {
                        score += 3;

                        BonusCoin[i].setPosition(-1000, -1000);
                        sound.setBuffer(CoinSoundEffect);
                        sound.play();

                    }
                }

                //goombafall da 34an lw el enemy we23 mario mynot4 fi line 498
                for (size_t i = 0; i < 6; i++) {

                    if (goomba[i].getPosition().y > 14 * 16) {
                        goombafall[i] = 1;
                        dieenemy[i] = 1;
                    }

                    if ((player.getGlobalBounds().intersects(goomba[i].getGlobalBounds()) && velocity.y != 0 && !mariodie) || goombafall[i])
                    {

                        goomba[i].setTextureRect(IntRect(2 * 16, 0, 16, 16));
                        dieenemy[i] = true;

                    }
                    if (dieenemy[i] && counter[i] < 16)
                    {

                        if (!goombafall[i] && !(naarr.getGlobalBounds().intersects(goomba[i].getGlobalBounds()))) {
                            player.move(0, -7);
                        }
                        counter[i]++;
                        EnemySpeed[i].x = 0;
                        window.draw(goomba[i]);
                    }
                }


                //3amlt visited array 34an lw 3dyt tani 3la el enemy ma7sb4 score m3 kol iteration :))))
                for (size_t i = 0; i < 6; i++) {

                    if (dieenemy[i] && !ScoreEnemy[i]) { score++; ScoreEnemy[i] = 1; }
                }


                for (size_t i = 0; i < 6; i++)
                {

                    if (player.getGlobalBounds().intersects(goomba[i].getGlobalBounds()) && velocity.y == 0 && !dieenemy[i] || player.getPosition().y > 13 * 16)
                    {
                        if (big_mario || marioburn) {

                            if (player.getPosition().y > 13 * 16) player.setPosition(1098.64, 192);
                            else
                            {
                                if (EnemySpeed[i].x > 0)
                                {
                                    player.move(5, 0);
                                    EnemySpeed[i].x = -1 * EnemySpeed[i].x;
                                }
                                else
                                {
                                    player.move(-5, 0);
                                    EnemySpeed[i].x = -1 * EnemySpeed[i].x;
                                }
                            }

                            mariodie = false;
                            big_mario = false;
                            marioburn = false;
                            player.setTexture(t);
                            player.setTextureRect(IntRect(0, 0, t.getSize().x / 7, t.getSize().y));


                        }

                        else {
                            player.setTextureRect(IntRect(32 * 6, 0, 32, 32));
                            mariodie = true;
                        }

                    }
                    if (mariodie && countmario < 500)
                    {
                        countmario++;
                        window.draw(player);
                    }
                }

                if (mariodie) {

                    if (!DeathSound) {
                        MarioDeath.play(); DeathSound = true;
                    }
                    player.setTextureRect(IntRect(32 * 6, 0, 32, 32));
                    player.move(0, -12);
                }


                for (size_t i = 0; i < coins.size(); i++) {
                    if (player.getGlobalBounds().intersects(coins[i].getGlobalBounds())) {
                        sound.setBuffer(CoinSoundEffect);
                        sound.play();
                        coins[i].setScale(0, 0);
                        score++;

                    }
                }


                for (size_t i = 0; i < coins.size(); i++) {

                    if (animation.getElapsedTime().asSeconds() > 0.05) {
                        c++;
                        animation.restart();
                    }
                    coins[i].setTextureRect(IntRect(c * 31, 0, 31, 31));
                }

                c = c % 7;

                /////   big mario     //////

                if (player.getGlobalBounds().intersects(mushroom.getGlobalBounds()))
                {
                    sound.setBuffer(PowerUp);
                    sound.play();
                    big_mario = true;
                    mushroom.setScale(0, 0);
                    firem = false;
                    naarr.setPosition(-5, -5);
                }


                if (big_mario) {
                    marioburn = false;
                    player.setTexture(big);
                    player.setTextureRect(IntRect(AnimationX * 32, 0, 32, 64));
                }
                else window.draw(mushroom);


                /// super mario ////

                if (player.getGlobalBounds().intersects(flower.getGlobalBounds())) {
                    sound.setBuffer(PowerUp);
                    sound.play();
                    marioburn = true;
                    flower.setScale(0, 0);
                }

                if (marioburn) {
                    big_mario = false;
                    player.setTexture(fire);
                    player.setTextureRect(IntRect(AnimationX * 32, 0, 32, 64));
                }
                else window.draw(flower);



                ////   fire   ////
                if (Keyboard::isKeyPressed(Keyboard::Space) && marioburn)
                {
                    firem = true;

                }

                if (firem)
                {
                    if (!firepos) {
                        naarr.setPosition(player.getPosition().x, player.getPosition().y + 8); firepos = true;
                        Firee.play();
                    }
                    naarr.setTextureRect(IntRect(4 * 16, 0, 16, 16));
                    naarr.setScale(1, 1);

                    if (LookingRight && !SightR && !SightL) {
                        SightR = true;
                    }
                    if (SightR) naarr.move(ann, 0);
                    if (LookingLeft && !SightL && !SightR) {
                        SightL = true;
                    }
                    if (SightL) naarr.move(-ann, 0);
                    if (ann < 6) ann++;
                    FireTime++;


                }


                for (size_t i = 0; i < 6; i++) {
                    if (naarr.getGlobalBounds().intersects(goomba[i].getGlobalBounds()) || FireTime >= 100)
                    {
                        if (naarr.getGlobalBounds().intersects(goomba[i].getGlobalBounds())) dieenemy[i] = true;
                        firem = false;
                        firepos = false;
                        SightL = false;
                        SightR = false;
                        ann = 0;
                        FireTime = 0;
                    }

                }
                text.setString("score: " + std::to_string(score));  //Displays Score

                player.move(velocity.x * speed, velocity.y);

                if (big_mario || marioburn) {
                    Left.setScale(1, 2);
                    Right.setScale(1, 2);
                    Down.setPosition(player.getPosition().x + 3, player.getPosition().y + 32);
                }
                else {
                    Left.setScale(1, 1);
                    Right.setScale(1, 1);
                    Down.setPosition(player.getPosition().x + 3, player.getPosition().y + 16);
                }
                Left.setPosition(player.getPosition().x, player.getPosition().y - 1);
                Right.setPosition(player.getPosition().x + 16, player.getPosition().y - 1);
                Top.setPosition(player.getPosition().x + 3, player.getPosition().y);

                //Handlying animations 
                if (jumping) {
                    if (big_mario || marioburn) player.setTextureRect(IntRect(32 * 5, 0, 32, 64));
                    else  player.setTextureRect(IntRect(32 * 5, 0, 32, 32));
                }
                else if (velocity.x != 0)
                {
                    AnimationX %= 4;
                    if (big_mario || marioburn)  player.setTextureRect(IntRect(32 * AnimationX, 0, 32, 64));
                    else player.setTextureRect(IntRect(32 * AnimationX, 0, 32, 32));
                }
                else {
                    if (big_mario || marioburn) {
                        player.setTextureRect(IntRect(32 * 0, 0, 32, 64));
                    }
                    else player.setTextureRect(IntRect(32 * 0, 0, 32, 32));
                }



                ///////////////
                int _highscore;
                int _score = score;
                //wwwwwww
                if (Win == true)
                {
                    ///window finish game 



                    RenderWindow window_finish(sf::VideoMode(1700, 900), "CONGRATULATIONS");
                    //////
                    RectangleShape background;
                    background.setSize(Vector2f(1700, 900));
                    Texture maintexture;
                    maintexture.loadFromFile("font/mario.png");
                    background.setTexture(&maintexture);
                    while (window_finish.isOpen())
                    {

                        sf::Event event;

                        while (window_finish.pollEvent(event))
                        {
                            if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Escape))
                                exit(0);
                            std::ifstream readFile;
                            readFile.open("data.txt");
                            if (readFile.is_open())
                            {
                                while (!readFile.eof())
                                {
                                    readFile >> _highscore;
                                }
                            }
                            readFile.close();
                            std::ofstream writeFile("data.txt");
                            if (writeFile.is_open())
                            {
                                if (_score > _highscore)
                                {
                                    _highscore = _score;
                                }
                                writeFile << _highscore;
                            }


                            readFile.close();

                            t1.setFont(font1);
                            t1.setFillColor(sf::Color::White);
                            t1.setString("Your highest score:");
                            t1.setCharacterSize(20);
                            t1.setPosition(sf::Vector2f(100, 270));

                            over.setFont(font1);
                            over.setFillColor(sf::Color::Black);
                            over.setString("CONGRATULATIONS!");
                            over.setCharacterSize(25);
                            over.setPosition(sf::Vector2f(130, 120));

                            t2.setFont(font1);
                            t2.setFillColor(sf::Color::White);
                            t2.setString("Your current score:");
                            t2.setCharacterSize(20);
                            t2.setPosition(sf::Vector2f(100, 230));

                            string str1 = to_string(_score);
                            s.setFont(font1);
                            s.setFillColor(sf::Color::White);
                            s.setString(str1);
                            s.setCharacterSize(20);
                            s.setPosition(sf::Vector2f(500, 230));

                            string str2 = to_string(_highscore);
                            h.setFont(font1);
                            h.setFillColor(sf::Color::White);
                            h.setString(str2);
                            h.setCharacterSize(20);
                            h.setPosition(sf::Vector2f(500, 270));

                        }
                        window_finish.clear();
                        window_finish.draw(background);
                        window_finish.draw(t1);
                        window_finish.draw(t2);
                        window_finish.draw(s);
                        window_finish.draw(h);
                        window_finish.draw(over);
                        window_finish.display();

                    }

                    /// WINDOW FINISH GAME 


                }
                if (mariodie == 1) {


                    ///window game over 
                    RenderWindow window_scores(sf::VideoMode(1700, 900), "scores");
                    RectangleShape background;
                    background.setSize(Vector2f(1700, 900));
                    Texture maintexture;
                    maintexture.loadFromFile("font/mario.png");
                    background.setTexture(&maintexture);
                    while (window_scores.isOpen())
                    {
                        sf::Event event;
                        while (window_scores.pollEvent(event))
                        {
                            if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Escape))
                                exit(0);


                            std::ifstream readFile;
                            readFile.open("data.txt");
                            if (readFile.is_open())
                            {
                                while (!readFile.eof())
                                {
                                    readFile >> _highscore;
                                }
                            }
                            readFile.close();
                            std::ofstream writeFile("data.txt");
                            if (writeFile.is_open())
                            {
                                if (_score > _highscore)
                                {
                                    _highscore = _score;
                                }
                                writeFile << _highscore;
                            }


                            int width1 = 0; float height1 = 0;




                            readFile.close();
                            t1.setFont(font1);
                            t1.setFillColor(sf::Color::White);
                            t1.setString("Your highest score:");
                            t1.setCharacterSize(20);
                            t1.setPosition(sf::Vector2f(100, 270));

                            over.setFont(font1);
                            over.setFillColor(sf::Color::Black);
                            over.setString("GAME OVER");
                            over.setCharacterSize(40);
                            over.setPosition(sf::Vector2f(130, 120));

                            t2.setFont(font1);
                            t2.setFillColor(sf::Color::White);
                            t2.setString("Your current score:");
                            t2.setCharacterSize(20);
                            t2.setPosition(sf::Vector2f(100, 230));

                            string str1 = to_string(_score);
                            s.setFont(font1);
                            s.setFillColor(sf::Color::White);
                            s.setString(str1);
                            s.setCharacterSize(20);
                            s.setPosition(sf::Vector2f(500, 230));

                            string str2 = to_string(_highscore);
                            h.setFont(font1);
                            h.setFillColor(sf::Color::White);
                            h.setString(str2);
                            h.setCharacterSize(20);
                            h.setPosition(sf::Vector2f(500, 270));


                        }
                        window_scores.clear();
                        window_scores.draw(background);
                        window_scores.draw(t1);
                        window_scores.draw(t2);
                        window_scores.draw(s);
                        window_scores.draw(h);
                        window_scores.draw(over);

                        window_scores.display();
                    }
                }



                text.setString("score: " + std::to_string(score));  //Displays Score

                window.setView(camera);
                // draw the map
                window.clear();
                for (int i = 0; i < 3200; i++) {
                    window.draw(MAP[i]);
                }

                for (int i = 0; i < ind; i++) {

                    window.draw(BonusCoin[i]);


                }
                window.draw(player);

                // draw goomba
                for (size_t i = 0; i < 6; i++) {
                    if (counter[i] < 16) {
                        window.draw(goomba[i]);
                    }
                }
                // draw coins
                for (short i = 0; i < coins.size(); i++) {
                    window.draw(coins[i]);
                }
                // draw text
                window.draw(text);
                /* window.draw(Left);
                 window.draw(Right);
                 window.draw(Down);
                 window.draw(Top);*/
                window.draw(mushroom);
                window.draw(flower);
                if (firem && marioburn) {
                    window.draw(naarr);
                }
                window.display();
            }

        }
        //how to play

        if (page_number == 1)
        {
            RenderWindow window_howplay(sf::VideoMode(1700, 900), "How to play?");
            RectangleShape background;
            background.setSize(Vector2f(1700, 900));
            Texture maintexture;
            maintexture.loadFromFile("font/mario.png");
            background.setTexture(&maintexture);
            while (window_howplay.isOpen())
            {
                sf::Event event;
                while (window_howplay.pollEvent(event))
                {
                    if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Escape))
                        window_howplay.close();
                    for (int i = 0; i < 10; i++)
                    {
                        hp[i].setFont(font1);
                        hp[i].setFillColor(sf::Color::White);
                        hp[i].setCharacterSize(20);
                        // hp[i].setPosition(sf::Vector2f(30, 220));

                    }

                    hp[1].setString("Mario is controlled by 4 distinct button A:left,W:jump,D:right space:throw flame.");
                    hp[2].setString("Mario will go on a journey to fight the evil goomba and eat along the path");
                    hp[3].setString("a historical mushroom that would expand his body and a magical flower that");
                    hp[4].setString("would help him to initiallize his flame throwing form.The player would collect");
                    hp[5].setString("coins and discover extra coins in the mystery box.Nevertheless  killing");
                    hp[6].setString("goomba would earn the player extra points.Players main objective to");
                    hp[7].setString("to finish the level without getting caught by goomba.Have fun : )  ");

                    hp[1].setPosition(sf::Vector2f(28, 220));
                    hp[2].setPosition(sf::Vector2f(28, 260));
                    hp[3].setPosition(sf::Vector2f(28, 300));
                    hp[4].setPosition(sf::Vector2f(28, 340));
                    hp[5].setPosition(sf::Vector2f(28, 380));
                    hp[6].setPosition(sf::Vector2f(28, 420));
                    hp[7].setPosition(sf::Vector2f(28, 460));

                }
                window_howplay.clear();
                window_howplay.draw(background);
                for (int i = 0; i < 10; i++)
                {
                    window_howplay.draw(hp[i]);
                }

                window_howplay.display();
            }

        }
        //credits
        if (page_number == 2)
        {



            RenderWindow window_credits(sf::VideoMode(1700, 900), "Credits");
            RectangleShape background;
            background.setSize(Vector2f(1700, 900));
            Texture maintexture;
            maintexture.loadFromFile("font/mario.png");
            background.setTexture(&maintexture);
            while (window_credits.isOpen())
            {
                sf::Event event;
                while (window_credits.pollEvent(event))
                {
                    if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Escape))
                        window_credits.close();


                    c.setFont(font1);
                    c.setFillColor(sf::Color::White);
                    c.setString("Credits:");
                    c.setCharacterSize(45);
                    c.setPosition(sf::Vector2f(100, 130));

                    n1.setFont(font1);
                    n1.setFillColor(sf::Color::Black);
                    n1.setString("Mohamed Wael Mohamed Hashim");
                    n1.setCharacterSize(35);
                    n1.setPosition(sf::Vector2f(100, 200));

                    n2.setFont(font1);
                    n2.setFillColor(sf::Color::Black);
                    n2.setString("Mohamed Ahmed Fathy ");
                    n2.setCharacterSize(35);
                    n2.setPosition(sf::Vector2f(100, 240));

                    n3.setFont(font1);
                    n3.setFillColor(sf::Color::Black);
                    n3.setString("Yousef mohamed rushdy  ");
                    n3.setCharacterSize(35);
                    n3.setPosition(sf::Vector2f(100, 280));

                    n4.setFont(font1);
                    n4.setFillColor(sf::Color::Black);
                    n4.setString("Malak Hossam Eldin Eldars  ");
                    n4.setCharacterSize(35);
                    n4.setPosition(sf::Vector2f(100, 320));

                    n5.setFont(font1);
                    n5.setFillColor(sf::Color::Black);
                    n5.setString("Salma Amr Bayoume");
                    n5.setCharacterSize(35);
                    n5.setPosition(sf::Vector2f(100, 360));

                    n6.setFont(font1);
                    n6.setFillColor(sf::Color::Black);
                    n6.setString("Aya Ahmed Sayed ");
                    n6.setCharacterSize(35);
                    n6.setPosition(sf::Vector2f(100, 400));

                    n7.setFont(font1);
                    n7.setFillColor(sf::Color::Black);
                    n7.setString("Maryam Mohamed ELdaly ");
                    n7.setCharacterSize(35);
                    n7.setPosition(sf::Vector2f(100, 440));
                }
                window_credits.clear();
                window_credits.draw(background);
                //  draw1(window, font1);
                window_credits.draw(c);
                window_credits.draw(n1);
                window_credits.draw(n2);
                window_credits.draw(n3);
                window_credits.draw(n4);
                window_credits.draw(n5);
                window_credits.draw(n6);
                window_credits.draw(n7);
                window_credits.display();
            }



        }
        if (page_number == 3)
        {
            //.exit
            break;
        }

    }
    return 0;

}







void mainmenu(int width1, float height1, sf::Font& font1)
{

    int Mainmenuseleted1;


    mainMenu1[3].setFont(font1);
    mainMenu1[3].setFillColor(sf::Color::White);
    mainMenu1[3].setString("Exit");
    mainMenu1[3].setCharacterSize(35);
    mainMenu1[3].setPosition(sf::Vector2f(120, 220));


    mainMenu1[2].setFont(font1);
    mainMenu1[2].setFillColor(sf::Color::White);
    mainMenu1[2].setString("Credits");
    mainMenu1[2].setCharacterSize(35);
    mainMenu1[2].setPosition(sf::Vector2f(120, 180));

    mainMenu1[1].setFont(font1);
    mainMenu1[1].setFillColor(sf::Color::White);
    mainMenu1[1].setString("How To Play?");
    mainMenu1[1].setCharacterSize(35);
    mainMenu1[1].setPosition(sf::Vector2f(120, 140));

    mainMenu1[0].setFont(font1);
    mainMenu1[0].setFillColor(sf::Color::Black);
    mainMenu1[0].setString("Start game");
    mainMenu1[0].setCharacterSize(35);
    mainMenu1[0].setPosition(sf::Vector2f(120, 100));
    Mainmenuseleted1 = 0;

}


void draw1(sf::RenderWindow& window, sf::Font& font1)
{
    for (int i = 0; i < 4; i++)
    {
        window.draw(mainMenu1[i]);
    }
}

void movedown()
{

    if (Mainmenuseleted1 + 1 <= Max_main_menu)
    {
        mainMenu1[Mainmenuseleted1].setFillColor(sf::Color::White);

        Mainmenuseleted1++;
        if (Mainmenuseleted1 == 4)
        {
            Mainmenuseleted1 = 0;
        }
        mainMenu1[Mainmenuseleted1].setFillColor(sf::Color::Black);
    }
}

void moveup()
{


    if (Mainmenuseleted1 - 1 >= -1)
    {
        mainMenu1[Mainmenuseleted1].setFillColor(sf::Color::White);

        Mainmenuseleted1--;
        if (Mainmenuseleted1 == -1)
        {
            Mainmenuseleted1 = 3;
        }
        mainMenu1[Mainmenuseleted1].setFillColor(sf::Color::Black);
    }
}

int mainmenupressed()
{


    return Mainmenuseleted1;
}



//////////////mappp
void LoadTiles() {

    Tiles[0].loadFromFile("Images/Ground.png");
    Tiles[1].loadFromFile("Images/Breakable.png");
    Tiles[2].loadFromFile("Images/3.png");
    Tiles[3].loadFromFile("Images/4.png");
    Tiles[4].loadFromFile("Images/5.png");
    Tiles[5].loadFromFile("Images/quest.png");
    Tiles[6].loadFromFile("Images/7.png");
    Tiles[7].loadFromFile("Images/8.png");
    Tiles[8].loadFromFile("Images/9.png");
    Tiles[9].loadFromFile("Images/10.png");
    Tiles[10].loadFromFile("Images/11.png");
    Tiles[11].loadFromFile("Images/12.png");
    Tiles[12].loadFromFile("Images/13.png");
    Tiles[13].loadFromFile("Images/14.png");
    Tiles[14].loadFromFile("Images/15.png");
    Tiles[15].loadFromFile("Images/16.png");
    Tiles[16].loadFromFile("Images/17.png");
    Tiles[17].loadFromFile("Images/18.png");
    Tiles[18].loadFromFile("Images/19.png");
    Tiles[19].loadFromFile("Images/20.png");
    Tiles[20].loadFromFile("Images/21.png");
    Tiles[21].loadFromFile("Images/22.png");
    Tiles[22].loadFromFile("Images/23.png");
    Tiles[23].loadFromFile("Images/24.png");
    Tiles[24].loadFromFile("Images/25.png");
    Tiles[25].loadFromFile("Images/26.png");
    Tiles[26].loadFromFile("Images/27.png");
    Tiles[27].loadFromFile("Images/28.png");
    Tiles[28].loadFromFile("Images/29.png");
    Tiles[29].loadFromFile("Images/30.png");
    Tiles[30].loadFromFile("Images/sky.png");

}
void DrawLevel(int arr[]) {

    for (int i = 0; i < 3200; i++) {

        MAP[i].setSize(Vector2f(16, 16));
        if (arr[i] != -1)
            MAP[i].setTexture(&Tiles[arr[i]]);
        else MAP[i].setFillColor(sf::Color(148, 148, 255));

        MAP[i].setPosition((i % 200) * 16, (i / 200) * 16);
    }

}
